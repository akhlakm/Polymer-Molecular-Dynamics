import os
import pyemc

from pmd.util import Pmdlogging
from pmd.preprocessing.utils import extract_gzip

class EMCTool:
    '''Low-level interface to run EMC.

    Attributes:
        force_field (str): Force field, options are `"pcff"`, `"opls-aa"`,
            `"opls-ua"`, and `"trappe"`
        time_travel (bool): Use time travel or not, default: `True`
    '''

    def __init__(self, force_field: str, time_travel : bool = True) -> None:
        self._force_field = force_field

        self.portal = os.path.abspath(
            os.path.join(os.path.dirname(__file__), "timetravel.so"))

        if not os.path.isfile(self.portal) or not time_travel:
            self.portal = None


    @staticmethod
    def _remove_brackets_around_asterisks(smiles: str) -> str:
        smiles = smiles.replace('[*]', '*')
        return smiles
    

    def extract_files(self, output_dir : str):
        """ Extract EMC generated gzip files, if any. """
        for f in os.listdir(output_dir):
            if f.endswith(".gz"):
                inpfile = os.path.join(output_dir, f)
                extract_gzip(inpfile)


    def _run_emc(self, file_prefix: str, output_dir: str, cleanup_exts : list):
        Pmdlogging.info('Launching EMC...')

        previous_dir = os.getcwd()

        # Setup timetravel
        ld_preload = os.getenv('LD_PRELOAD', '')
        if self.portal:
            os.environ['LD_PRELOAD'] = self.portal +":"+ ld_preload

        try:
            os.chdir(output_dir)

            pyemc.setup(f'{file_prefix}.esh')
            pyemc.build(f'build.emc')
            Pmdlogging.info(f'System file - {file_prefix} '
                            f'successfully created in {output_dir}')

        finally:
            # Revert timetravel to avoid affecting other programs.
            os.environ['LD_PRELOAD'] = ld_preload

            # Clean up all generated files having specified extensions
            if cleanup_exts:
                for fname in cleanup_exts:
                    fname = f"{file_prefix}.{fname}"
                    if os.path.isfile(fname):
                        os.remove(fname)

        os.chdir(previous_dir)


    def create_polymer_system(self, output_dir: str, file_prefix : str,
                              smiles: str, density: float, end_cap_smiles: str,
                              natoms_total: int, length: int, nchains: int,
                              disable_charge_check : bool = False,
                              cleanup_exts: list = []) -> None:

        smiles = self._remove_brackets_around_asterisks(smiles)
        end_cap_smiles = self._remove_brackets_around_asterisks(end_cap_smiles)

        # Write .esh file required to run EMC
        esh_file = os.path.join(output_dir, f'{file_prefix}.esh')
        with open(esh_file, 'w') as f:
            f.write(f'# EMC input file generated by PMD\n')
            f.write(f'ITEM OPTIONS\n')
            f.write(f'replace true\n')
            f.write(f'field {self._force_field}\n')
            f.write(f'density {density}\n')
            f.write(f'ntotal {natoms_total}\n')
            f.write(f'pdb_compress false\n')
            f.write(f'pdb_connect true\n')
            f.write(f'pdb_unwrap none\n')
            if disable_charge_check:
                f.write(f'system_charge false\n')
            f.write(f'ITEM END\n')
            f.write(f'\n')
            f.write(f'ITEM GROUPS\n')
            f.write(f'RU {smiles},1,RU:2\n')
            f.write(f'terminator {end_cap_smiles},1,RU:1,1,RU:2\n')
            f.write(f'ITEM END\n')
            f.write(f'\n')
            f.write(f'ITEM CLUSTERS\n')
            f.write(f'poly alternate 1\n')
            f.write(f'ITEM END\n')
            f.write(f'\n')
            f.write(f'ITEM POLYMERS\n')
            f.write(f'poly\n')
            f.write(f'1 RU,{length},terminator,2\n')
            f.write(f'ITEM END\n')

        self._run_emc(file_prefix, output_dir, cleanup_exts)


    def create_solvated_system(self, output_dir: str, file_prefix : str,
                               smiles: str, density: float, end_cap_smiles: str,
                               natoms_total: int, length: int, nchains: int,
                               solvent_smiles: str, nsolvents: int,
                               cleanup_exts: list = []) -> None:

        smiles = self._remove_brackets_around_asterisks(smiles)
        end_cap_smiles = self._remove_brackets_around_asterisks(end_cap_smiles)

        # Write .esh file required to run EMC
        esh_file = os.path.join(output_dir, f'{file_prefix}.esh')
        with open(esh_file, 'w') as f:
            f.write('# EMC input file generated by PMD\n')
            f.write('ITEM OPTIONS\n')
            f.write('replace true\n')
            f.write(f'field {self._force_field}\n')
            f.write(f'density {density}\n')
            f.write(f'ntotal {natoms_total}\n')
            f.write('ITEM END\n')
            f.write('\n')
            f.write('ITEM GROUPS\n')
            f.write(f'solvent {solvent_smiles}\n')
            f.write(f'RU {smiles},1,RU:2\n')
            f.write(f'terminator {end_cap_smiles},1,RU:1,1,RU:2\n')
            f.write('ITEM END\n')
            f.write('\n')
            f.write('ITEM CLUSTERS\n')
            f.write(f'solvent solvent {nsolvents/(nsolvents + nchains)}\n')
            f.write(f'poly alternate {nchains/(nsolvents + nchains)}\n')
            f.write('ITEM END\n')
            f.write('\n')
            f.write('ITEM POLYMERS\n')
            f.write('poly\n')
            f.write(f'1 RU,{length},terminator,2\n')
            f.write('ITEM END\n')

        self._run_emc(file_prefix, output_dir, cleanup_exts)




if __name__ == "__main__":
    # Test environment, if executed directly.
    emc = EMCTool('opls-aa')
    emc.create_polymer_system(".", "emc_test", "*CC*", 1.0, "*C", 100, 10, 1)
